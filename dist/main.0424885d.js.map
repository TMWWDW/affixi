{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.0424885d.js","sourceRoot":"..\\src","sourcesContent":["enum Case {\r\n  /** İsmin Yalın Hâli */\r\n  Absolute,\r\n  /** İsmin Belirtme Hâli */\r\n  Accusative,\r\n  /** İsmin Ayrılma Hâli */\r\n  Ablative,\r\n  /** İsmin Bulunma Hâli */\r\n  Locative,\r\n  /** İsmin Vasıta Hâli */\r\n  Instrumental,\r\n  /** İsmin Yönelme Hâli */\r\n  Dative\r\n}\r\n\r\nclass CaseSuffix {\r\n  type: Case;\r\n  constructor() {\r\n    this.type = Case.Absolute;\r\n  }\r\n\r\n  case(type: Case) {\r\n    this.type = type;\r\n    return this;\r\n  }\r\n  of(word: string, isProperNoun = false): string {\r\n    let result = \"\";\r\n    let suffix = \"\";\r\n    if (isProperNoun) suffix += \"'\";\r\n\r\n    switch (this.type) {\r\n      case Case.Absolute:\r\n        result = this.absolute(word);\r\n        break;\r\n      case Case.Accusative:\r\n        suffix += this.accusative(word);\r\n        result = word + suffix;\r\n        break;\r\n      case Case.Ablative:\r\n        suffix += this.ablative(word);\r\n        result = word + suffix;\r\n        break;\r\n      case Case.Locative:\r\n        suffix += this.locative(word);\r\n        result = word + suffix;\r\n        break;\r\n      case Case.Instrumental:\r\n        suffix += this.instrumental(word);\r\n        result = word + suffix;\r\n        break;\r\n      case Case.Dative:\r\n        suffix += this.dative(word);\r\n        result = word + suffix;\r\n        break;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static UnvoicedConsonants = [\"f\", \"s\", \"t\", \"k\", \"ç\", \"ş\", \"h\", \"p\"];\r\n  private static UnroundedVowels = [\"o\", \"u\", \"ö\", \"ü\"];\r\n  private static RoundedVowels = [\"a\", \"ı\", \"e\", \"i\"];\r\n  private static BackVowels = [\"e\", \"i\", \"ö\", \"ü\"];\r\n  private static FrontVowels = [\"a\", \"ı\", \"o\", \"u\"];\r\n  private static Vowels = [...CaseSuffix.UnroundedVowels, ...CaseSuffix.RoundedVowels];\r\n\r\n  private static GetLastComponents(word: string) {\r\n    let input = word\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\");\r\n    let index = 0;\r\n    let letter = input[0];\r\n    let vowel = input[index];\r\n\r\n    while (!CaseSuffix.Vowels.includes(vowel)) {\r\n      index++;\r\n      vowel = input[index];\r\n    }\r\n    return { letter, vowel };\r\n  }\r\n\r\n  private absolute(word: string): string {\r\n    return word;\r\n  }\r\n\r\n  private accusative(word: string): string {\r\n    let { letter, vowel } = CaseSuffix.GetLastComponents(word);\r\n    let suffix = \"\";\r\n\r\n    if (CaseSuffix.Vowels.includes(letter)) {\r\n      suffix += \"y\";\r\n    }\r\n    if (CaseSuffix.FrontVowels.includes(vowel)) {\r\n      suffix += \"ı\";\r\n    } else if (CaseSuffix.BackVowels.includes(vowel)) {\r\n      suffix += \"i\";\r\n    }\r\n\r\n    return suffix;\r\n  }\r\n\r\n  private ablative(word: string): string {\r\n    return this.locative(word) + \"n\";\r\n  }\r\n\r\n  private locative(word: string): string {\r\n    let { letter, vowel } = CaseSuffix.GetLastComponents(word);\r\n    let suffix = \"\";\r\n\r\n    if (CaseSuffix.UnvoicedConsonants.includes(letter)) {\r\n      suffix += \"t\";\r\n    } else {\r\n      suffix += \"d\";\r\n    }\r\n    if (CaseSuffix.FrontVowels.includes(vowel)) {\r\n      suffix += \"a\";\r\n    } else if (CaseSuffix.BackVowels.includes(vowel)) {\r\n      suffix += \"e\";\r\n    }\r\n\r\n    return suffix;\r\n  }\r\n\r\n  private instrumental(word: string): string {\r\n    let { letter, vowel } = CaseSuffix.GetLastComponents(word);\r\n    let suffix = \"\";\r\n\r\n    if (CaseSuffix.Vowels.includes(letter)) {\r\n      suffix += \"y\";\r\n    }\r\n    if (CaseSuffix.FrontVowels.includes(vowel)) {\r\n      suffix += \"la\";\r\n    } else if (CaseSuffix.BackVowels.includes(vowel)) {\r\n      suffix += \"le\";\r\n    }\r\n\r\n    return suffix;\r\n  }\r\n\r\n  private dative(word: string): string {\r\n    let { letter, vowel } = CaseSuffix.GetLastComponents(word);\r\n    let suffix = \"\";\r\n\r\n    if (CaseSuffix.Vowels.includes(letter)) {\r\n      suffix += \"y\";\r\n    }\r\n    if (CaseSuffix.FrontVowels.includes(vowel)) {\r\n      suffix += \"a\";\r\n    } else if (CaseSuffix.BackVowels.includes(vowel)) {\r\n      suffix += \"e\";\r\n    }\r\n\r\n    return suffix;\r\n  }\r\n}\r\n\r\nlet suffix = new CaseSuffix();\r\nlet w = suffix.case(Case.Absolute).of(\"bilgisayar\");\r\nconsole.log(w);\r\n"]}